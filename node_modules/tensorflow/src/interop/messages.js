'use strict'; // code generated by pbf v3.1.0

var DataType = exports.DataType = {
    "DT_INVALID": 0,
    "DT_FLOAT": 1,
    "DT_DOUBLE": 2,
    "DT_INT32": 3,
    "DT_UINT8": 4,
    "DT_INT16": 5,
    "DT_INT8": 6,
    "DT_STRING": 7,
    "DT_COMPLEX64": 8,
    "DT_INT64": 9,
    "DT_BOOL": 10,
    "DT_QINT8": 11,
    "DT_QUINT8": 12,
    "DT_QINT32": 13,
    "DT_BFLOAT16": 14,
    "DT_FLOAT_REF": 101,
    "DT_DOUBLE_REF": 102,
    "DT_INT32_REF": 103,
    "DT_UINT8_REF": 104,
    "DT_INT16_REF": 105,
    "DT_INT8_REF": 106,
    "DT_STRING_REF": 107,
    "DT_COMPLEX64_REF": 108,
    "DT_INT64_REF": 109,
    "DT_BOOL_REF": 110,
    "DT_QINT8_REF": 111,
    "DT_QUINT8_REF": 112,
    "DT_QINT32_REF": 113,
    "DT_BFLOAT16_REF": 114
};

// Any ========================================

var Any = exports.Any = {};

Any.read = function (pbf, end) {
    return pbf.readFields(Any._readField, {type_url: "", value: null}, end);
};
Any._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.type_url = pbf.readString();
    else if (tag === 2) obj.value = pbf.readBytes();
};
Any.write = function (obj, pbf) {
    if (obj.type_url) pbf.writeStringField(1, obj.type_url);
    if (obj.value) pbf.writeBytesField(2, obj.value);
};

// TensorShape ========================================

var TensorShape = exports.TensorShape = {};

TensorShape.read = function (pbf, end) {
    return pbf.readFields(TensorShape._readField, {dim: [], unknown_rank: false}, end);
};
TensorShape._readField = function (tag, obj, pbf) {
    if (tag === 2) obj.dim.push(TensorShape.Dim.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.unknown_rank = pbf.readBoolean();
};
TensorShape.write = function (obj, pbf) {
    if (obj.dim) for (var i = 0; i < obj.dim.length; i++) pbf.writeMessage(2, TensorShape.Dim.write, obj.dim[i]);
    if (obj.unknown_rank) pbf.writeBooleanField(3, obj.unknown_rank);
};

// TensorShape.Dim ========================================

TensorShape.Dim = {};

TensorShape.Dim.read = function (pbf, end) {
    return pbf.readFields(TensorShape.Dim._readField, {size: 0, name: ""}, end);
};
TensorShape.Dim._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.size = pbf.readVarint(true);
    else if (tag === 2) obj.name = pbf.readString();
};
TensorShape.Dim.write = function (obj, pbf) {
    if (obj.size) pbf.writeVarintField(1, obj.size);
    if (obj.name) pbf.writeStringField(2, obj.name);
};

// Tensor ========================================

var Tensor = exports.Tensor = {};

Tensor.read = function (pbf, end) {
    return pbf.readFields(Tensor._readField, {dtype: 0, tensor_shape: null, version_number: 0, tensor_content: null, float_val: [], double_val: [], int_val: [], string_val: [], scomplex_val: [], int64_val: [], bool_val: [], uint32_val: [], uint64_val: []}, end);
};
Tensor._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.dtype = pbf.readVarint();
    else if (tag === 2) obj.tensor_shape = TensorShape.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.version_number = pbf.readVarint(true);
    else if (tag === 4) obj.tensor_content = pbf.readBytes();
    else if (tag === 5) pbf.readPackedFloat(obj.float_val);
    else if (tag === 6) pbf.readPackedDouble(obj.double_val);
    else if (tag === 7) pbf.readPackedVarint(obj.int_val, true);
    else if (tag === 8) obj.string_val.push(pbf.readBytes());
    else if (tag === 9) pbf.readPackedFloat(obj.scomplex_val);
    else if (tag === 10) pbf.readPackedVarint(obj.int64_val, true);
    else if (tag === 11) pbf.readPackedBoolean(obj.bool_val);
    else if (tag === 16) pbf.readPackedVarint(obj.uint32_val);
    else if (tag === 17) pbf.readPackedVarint(obj.uint64_val);
};
Tensor.write = function (obj, pbf) {
    if (obj.dtype) pbf.writeVarintField(1, obj.dtype);
    if (obj.tensor_shape) pbf.writeMessage(2, TensorShape.write, obj.tensor_shape);
    if (obj.version_number) pbf.writeVarintField(3, obj.version_number);
    if (obj.tensor_content) pbf.writeBytesField(4, obj.tensor_content);
    if (obj.float_val) pbf.writePackedFloat(5, obj.float_val);
    if (obj.double_val) pbf.writePackedDouble(6, obj.double_val);
    if (obj.int_val) pbf.writePackedVarint(7, obj.int_val);
    if (obj.string_val) for (var i = 0; i < obj.string_val.length; i++) pbf.writeBytesField(8, obj.string_val[i]);
    if (obj.scomplex_val) pbf.writePackedFloat(9, obj.scomplex_val);
    if (obj.int64_val) pbf.writePackedVarint(10, obj.int64_val);
    if (obj.bool_val) pbf.writePackedBoolean(11, obj.bool_val);
    if (obj.uint32_val) pbf.writePackedVarint(16, obj.uint32_val);
    if (obj.uint64_val) pbf.writePackedVarint(17, obj.uint64_val);
};

// AttrValue ========================================

var AttrValue = exports.AttrValue = {};

AttrValue.read = function (pbf, end) {
    return pbf.readFields(AttrValue._readField, {list: null, value: null, s: null, i: 0, f: 0, b: false, type: 0, shape: null, tensor: null, placeholder: "", func: null}, end);
};
AttrValue._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.list = AttrValue.ListValue.read(pbf, pbf.readVarint() + pbf.pos), obj.value = "list";
    else if (tag === 2) obj.s = pbf.readBytes(), obj.value = "s";
    else if (tag === 3) obj.i = pbf.readVarint(true), obj.value = "i";
    else if (tag === 4) obj.f = pbf.readFloat(), obj.value = "f";
    else if (tag === 5) obj.b = pbf.readBoolean(), obj.value = "b";
    else if (tag === 6) obj.type = pbf.readVarint(), obj.value = "type";
    else if (tag === 7) obj.shape = TensorShape.read(pbf, pbf.readVarint() + pbf.pos), obj.value = "shape";
    else if (tag === 8) obj.tensor = Tensor.read(pbf, pbf.readVarint() + pbf.pos), obj.value = "tensor";
    else if (tag === 9) obj.placeholder = pbf.readString(), obj.value = "placeholder";
    else if (tag === 10) obj.func = NameAttrList.read(pbf, pbf.readVarint() + pbf.pos), obj.value = "func";
};
AttrValue.write = function (obj, pbf) {
    if (obj.list) pbf.writeMessage(1, AttrValue.ListValue.write, obj.list);
    if (obj.s) pbf.writeBytesField(2, obj.s);
    if (obj.i) pbf.writeVarintField(3, obj.i);
    if (obj.f) pbf.writeFloatField(4, obj.f);
    if (obj.b) pbf.writeBooleanField(5, obj.b);
    if (obj.type) pbf.writeVarintField(6, obj.type);
    if (obj.shape) pbf.writeMessage(7, TensorShape.write, obj.shape);
    if (obj.tensor) pbf.writeMessage(8, Tensor.write, obj.tensor);
    if (obj.placeholder) pbf.writeStringField(9, obj.placeholder);
    if (obj.func) pbf.writeMessage(10, NameAttrList.write, obj.func);
};

// AttrValue.ListValue ========================================

AttrValue.ListValue = {};

AttrValue.ListValue.read = function (pbf, end) {
    return pbf.readFields(AttrValue.ListValue._readField, {s: [], i: [], f: [], b: [], type: [], shape: [], tensor: [], func: []}, end);
};
AttrValue.ListValue._readField = function (tag, obj, pbf) {
    if (tag === 2) obj.s.push(pbf.readBytes());
    else if (tag === 3) pbf.readPackedVarint(obj.i, true);
    else if (tag === 4) pbf.readPackedFloat(obj.f);
    else if (tag === 5) pbf.readPackedBoolean(obj.b);
    else if (tag === 6) pbf.readPackedVarint(obj.type);
    else if (tag === 7) obj.shape.push(TensorShape.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 8) obj.tensor.push(Tensor.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 9) obj.func.push(NameAttrList.read(pbf, pbf.readVarint() + pbf.pos));
};
AttrValue.ListValue.write = function (obj, pbf) {
    if (obj.s) for (var i = 0; i < obj.s.length; i++) pbf.writeBytesField(2, obj.s[i]);
    if (obj.i) pbf.writePackedVarint(3, obj.i);
    if (obj.f) pbf.writePackedFloat(4, obj.f);
    if (obj.b) pbf.writePackedBoolean(5, obj.b);
    if (obj.type) pbf.writePackedVarint(6, obj.type);
    if (obj.shape) for (i = 0; i < obj.shape.length; i++) pbf.writeMessage(7, TensorShape.write, obj.shape[i]);
    if (obj.tensor) for (i = 0; i < obj.tensor.length; i++) pbf.writeMessage(8, Tensor.write, obj.tensor[i]);
    if (obj.func) for (i = 0; i < obj.func.length; i++) pbf.writeMessage(9, NameAttrList.write, obj.func[i]);
};

// NameAttrList ========================================

var NameAttrList = exports.NameAttrList = {};

NameAttrList.read = function (pbf, end) {
    return pbf.readFields(NameAttrList._readField, {name: "", attr: {}}, end);
};
NameAttrList._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2)  { var entry = NameAttrList._FieldEntry2.read(pbf, pbf.readVarint() + pbf.pos); obj.attr[entry.key] = entry.value; }
};
NameAttrList.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.attr) for (var i in obj.attr) if (Object.prototype.hasOwnProperty.call(obj.attr, i)) pbf.writeMessage(2, NameAttrList._FieldEntry2.write, { key: i, value: obj.attr[i] });
};

// NameAttrList._FieldEntry2 ========================================

NameAttrList._FieldEntry2 = {};

NameAttrList._FieldEntry2.read = function (pbf, end) {
    return pbf.readFields(NameAttrList._FieldEntry2._readField, {key: "", value: null}, end);
};
NameAttrList._FieldEntry2._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.key = pbf.readString();
    else if (tag === 2) obj.value = AttrValue.read(pbf, pbf.readVarint() + pbf.pos);
};
NameAttrList._FieldEntry2.write = function (obj, pbf) {
    if (obj.key) pbf.writeStringField(1, obj.key);
    if (obj.value) pbf.writeMessage(2, AttrValue.write, obj.value);
};

// NodeDef ========================================

var NodeDef = exports.NodeDef = {};

NodeDef.read = function (pbf, end) {
    return pbf.readFields(NodeDef._readField, {name: "", op: "", input: [], device: "", attr: {}}, end);
};
NodeDef._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.op = pbf.readString();
    else if (tag === 3) obj.input.push(pbf.readString());
    else if (tag === 4) obj.device = pbf.readString();
    else if (tag === 5)  { var entry = NodeDef._FieldEntry5.read(pbf, pbf.readVarint() + pbf.pos); obj.attr[entry.key] = entry.value; }
};
NodeDef.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.op) pbf.writeStringField(2, obj.op);
    if (obj.input) for (var i = 0; i < obj.input.length; i++) pbf.writeStringField(3, obj.input[i]);
    if (obj.device) pbf.writeStringField(4, obj.device);
    if (obj.attr) for (i in obj.attr) if (Object.prototype.hasOwnProperty.call(obj.attr, i)) pbf.writeMessage(5, NodeDef._FieldEntry5.write, { key: i, value: obj.attr[i] });
};

// NodeDef._FieldEntry5 ========================================

NodeDef._FieldEntry5 = {};

NodeDef._FieldEntry5.read = function (pbf, end) {
    return pbf.readFields(NodeDef._FieldEntry5._readField, {key: "", value: null}, end);
};
NodeDef._FieldEntry5._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.key = pbf.readString();
    else if (tag === 2) obj.value = AttrValue.read(pbf, pbf.readVarint() + pbf.pos);
};
NodeDef._FieldEntry5.write = function (obj, pbf) {
    if (obj.key) pbf.writeStringField(1, obj.key);
    if (obj.value) pbf.writeMessage(2, AttrValue.write, obj.value);
};

// VersionDef ========================================

var VersionDef = exports.VersionDef = {};

VersionDef.read = function (pbf, end) {
    return pbf.readFields(VersionDef._readField, {producer: 0, min_consumer: 0, bad_consumers: []}, end);
};
VersionDef._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.producer = pbf.readVarint(true);
    else if (tag === 2) obj.min_consumer = pbf.readVarint(true);
    else if (tag === 3) pbf.readPackedVarint(obj.bad_consumers, true);
};
VersionDef.write = function (obj, pbf) {
    if (obj.producer) pbf.writeVarintField(1, obj.producer);
    if (obj.min_consumer) pbf.writeVarintField(2, obj.min_consumer);
    if (obj.bad_consumers) pbf.writePackedVarint(3, obj.bad_consumers);
};

// GraphDef ========================================

var GraphDef = exports.GraphDef = {};

GraphDef.read = function (pbf, end) {
    return pbf.readFields(GraphDef._readField, {node: [], versions: null}, end);
};
GraphDef._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.node.push(NodeDef.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 4) obj.versions = VersionDef.read(pbf, pbf.readVarint() + pbf.pos);
};
GraphDef.write = function (obj, pbf) {
    if (obj.node) for (var i = 0; i < obj.node.length; i++) pbf.writeMessage(1, NodeDef.write, obj.node[i]);
    if (obj.versions) pbf.writeMessage(4, VersionDef.write, obj.versions);
};

// CollectionDef ========================================

var CollectionDef = exports.CollectionDef = {};

CollectionDef.read = function (pbf, end) {
    return pbf.readFields(CollectionDef._readField, {node_list: null, kind: null, bytes_list: null, int64_list: null, float_list: null, any_list: null}, end);
};
CollectionDef._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.node_list = CollectionDef.NodeList.read(pbf, pbf.readVarint() + pbf.pos), obj.kind = "node_list";
    else if (tag === 2) obj.bytes_list = CollectionDef.BytesList.read(pbf, pbf.readVarint() + pbf.pos), obj.kind = "bytes_list";
    else if (tag === 3) obj.int64_list = CollectionDef.Int64List.read(pbf, pbf.readVarint() + pbf.pos), obj.kind = "int64_list";
    else if (tag === 4) obj.float_list = CollectionDef.FloatList.read(pbf, pbf.readVarint() + pbf.pos), obj.kind = "float_list";
    else if (tag === 5) obj.any_list = CollectionDef.AnyList.read(pbf, pbf.readVarint() + pbf.pos), obj.kind = "any_list";
};
CollectionDef.write = function (obj, pbf) {
    if (obj.node_list) pbf.writeMessage(1, CollectionDef.NodeList.write, obj.node_list);
    if (obj.bytes_list) pbf.writeMessage(2, CollectionDef.BytesList.write, obj.bytes_list);
    if (obj.int64_list) pbf.writeMessage(3, CollectionDef.Int64List.write, obj.int64_list);
    if (obj.float_list) pbf.writeMessage(4, CollectionDef.FloatList.write, obj.float_list);
    if (obj.any_list) pbf.writeMessage(5, CollectionDef.AnyList.write, obj.any_list);
};

// CollectionDef.NodeList ========================================

CollectionDef.NodeList = {};

CollectionDef.NodeList.read = function (pbf, end) {
    return pbf.readFields(CollectionDef.NodeList._readField, {value: []}, end);
};
CollectionDef.NodeList._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.value.push(pbf.readString());
};
CollectionDef.NodeList.write = function (obj, pbf) {
    if (obj.value) for (var i = 0; i < obj.value.length; i++) pbf.writeStringField(1, obj.value[i]);
};

// CollectionDef.BytesList ========================================

CollectionDef.BytesList = {};

CollectionDef.BytesList.read = function (pbf, end) {
    return pbf.readFields(CollectionDef.BytesList._readField, {value: []}, end);
};
CollectionDef.BytesList._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.value.push(pbf.readBytes());
};
CollectionDef.BytesList.write = function (obj, pbf) {
    if (obj.value) for (var i = 0; i < obj.value.length; i++) pbf.writeBytesField(1, obj.value[i]);
};

// CollectionDef.Int64List ========================================

CollectionDef.Int64List = {};

CollectionDef.Int64List.read = function (pbf, end) {
    return pbf.readFields(CollectionDef.Int64List._readField, {value: []}, end);
};
CollectionDef.Int64List._readField = function (tag, obj, pbf) {
    if (tag === 1) pbf.readPackedVarint(obj.value, true);
};
CollectionDef.Int64List.write = function (obj, pbf) {
    if (obj.value) pbf.writePackedVarint(1, obj.value);
};

// CollectionDef.FloatList ========================================

CollectionDef.FloatList = {};

CollectionDef.FloatList.read = function (pbf, end) {
    return pbf.readFields(CollectionDef.FloatList._readField, {value: []}, end);
};
CollectionDef.FloatList._readField = function (tag, obj, pbf) {
    if (tag === 1) pbf.readPackedFloat(obj.value);
};
CollectionDef.FloatList.write = function (obj, pbf) {
    if (obj.value) pbf.writePackedFloat(1, obj.value);
};

// CollectionDef.AnyList ========================================

CollectionDef.AnyList = {};

CollectionDef.AnyList.read = function (pbf, end) {
    return pbf.readFields(CollectionDef.AnyList._readField, {value: []}, end);
};
CollectionDef.AnyList._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.value.push(Any.read(pbf, pbf.readVarint() + pbf.pos));
};
CollectionDef.AnyList.write = function (obj, pbf) {
    if (obj.value) for (var i = 0; i < obj.value.length; i++) pbf.writeMessage(1, Any.write, obj.value[i]);
};

// SaverDef ========================================

var SaverDef = exports.SaverDef = {};

SaverDef.read = function (pbf, end) {
    return pbf.readFields(SaverDef._readField, {filename_tensor_name: "", save_tensor_name: "", restore_op_name: "", max_to_keep: 0, sharded: false, keep_checkpoint_every_n_hours: 0, version: 0}, end);
};
SaverDef._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.filename_tensor_name = pbf.readString();
    else if (tag === 2) obj.save_tensor_name = pbf.readString();
    else if (tag === 3) obj.restore_op_name = pbf.readString();
    else if (tag === 4) obj.max_to_keep = pbf.readVarint(true);
    else if (tag === 5) obj.sharded = pbf.readBoolean();
    else if (tag === 6) obj.keep_checkpoint_every_n_hours = pbf.readFloat();
    else if (tag === 7) obj.version = pbf.readVarint();
};
SaverDef.write = function (obj, pbf) {
    if (obj.filename_tensor_name) pbf.writeStringField(1, obj.filename_tensor_name);
    if (obj.save_tensor_name) pbf.writeStringField(2, obj.save_tensor_name);
    if (obj.restore_op_name) pbf.writeStringField(3, obj.restore_op_name);
    if (obj.max_to_keep) pbf.writeVarintField(4, obj.max_to_keep);
    if (obj.sharded) pbf.writeBooleanField(5, obj.sharded);
    if (obj.keep_checkpoint_every_n_hours) pbf.writeFloatField(6, obj.keep_checkpoint_every_n_hours);
    if (obj.version) pbf.writeVarintField(7, obj.version);
};

SaverDef.CheckpointFormatVersion = {
    "LEGACY": 0,
    "V1": 1,
    "V2": 2
};

// TensorInfo ========================================

var TensorInfo = exports.TensorInfo = {};

TensorInfo.read = function (pbf, end) {
    return pbf.readFields(TensorInfo._readField, {name: "", encoding: null, coo_sparse: null, dtype: 0, tensor_shape: null}, end);
};
TensorInfo._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString(), obj.encoding = "name";
    else if (tag === 4) obj.coo_sparse = TensorInfo.CooSparse.read(pbf, pbf.readVarint() + pbf.pos), obj.encoding = "coo_sparse";
    else if (tag === 2) obj.dtype = pbf.readVarint();
    else if (tag === 3) obj.tensor_shape = TensorShape.read(pbf, pbf.readVarint() + pbf.pos);
};
TensorInfo.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.coo_sparse) pbf.writeMessage(4, TensorInfo.CooSparse.write, obj.coo_sparse);
    if (obj.dtype) pbf.writeVarintField(2, obj.dtype);
    if (obj.tensor_shape) pbf.writeMessage(3, TensorShape.write, obj.tensor_shape);
};

// TensorInfo.CooSparse ========================================

TensorInfo.CooSparse = {};

TensorInfo.CooSparse.read = function (pbf, end) {
    return pbf.readFields(TensorInfo.CooSparse._readField, {values_tensor_name: "", indices_tensor_name: "", dense_shape_tensor_name: ""}, end);
};
TensorInfo.CooSparse._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.values_tensor_name = pbf.readString();
    else if (tag === 2) obj.indices_tensor_name = pbf.readString();
    else if (tag === 3) obj.dense_shape_tensor_name = pbf.readString();
};
TensorInfo.CooSparse.write = function (obj, pbf) {
    if (obj.values_tensor_name) pbf.writeStringField(1, obj.values_tensor_name);
    if (obj.indices_tensor_name) pbf.writeStringField(2, obj.indices_tensor_name);
    if (obj.dense_shape_tensor_name) pbf.writeStringField(3, obj.dense_shape_tensor_name);
};

// SignatureDef ========================================

var SignatureDef = exports.SignatureDef = {};

SignatureDef.read = function (pbf, end) {
    return pbf.readFields(SignatureDef._readField, {inputs: {}, outputs: {}, method_name: ""}, end);
};
SignatureDef._readField = function (tag, obj, pbf) {
    if (tag === 1)  { var entry = SignatureDef._FieldEntry1.read(pbf, pbf.readVarint() + pbf.pos); obj.inputs[entry.key] = entry.value; }
    else if (tag === 2)  { entry = SignatureDef._FieldEntry2.read(pbf, pbf.readVarint() + pbf.pos); obj.outputs[entry.key] = entry.value; }
    else if (tag === 3) obj.method_name = pbf.readString();
};
SignatureDef.write = function (obj, pbf) {
    if (obj.inputs) for (var i in obj.inputs) if (Object.prototype.hasOwnProperty.call(obj.inputs, i)) pbf.writeMessage(1, SignatureDef._FieldEntry1.write, { key: i, value: obj.inputs[i] });
    if (obj.outputs) for (i in obj.outputs) if (Object.prototype.hasOwnProperty.call(obj.outputs, i)) pbf.writeMessage(2, SignatureDef._FieldEntry2.write, { key: i, value: obj.outputs[i] });
    if (obj.method_name) pbf.writeStringField(3, obj.method_name);
};

// SignatureDef._FieldEntry1 ========================================

SignatureDef._FieldEntry1 = {};

SignatureDef._FieldEntry1.read = function (pbf, end) {
    return pbf.readFields(SignatureDef._FieldEntry1._readField, {key: "", value: null}, end);
};
SignatureDef._FieldEntry1._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.key = pbf.readString();
    else if (tag === 2) obj.value = TensorInfo.read(pbf, pbf.readVarint() + pbf.pos);
};
SignatureDef._FieldEntry1.write = function (obj, pbf) {
    if (obj.key) pbf.writeStringField(1, obj.key);
    if (obj.value) pbf.writeMessage(2, TensorInfo.write, obj.value);
};

// SignatureDef._FieldEntry2 ========================================

SignatureDef._FieldEntry2 = {};

SignatureDef._FieldEntry2.read = function (pbf, end) {
    return pbf.readFields(SignatureDef._FieldEntry2._readField, {key: "", value: null}, end);
};
SignatureDef._FieldEntry2._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.key = pbf.readString();
    else if (tag === 2) obj.value = TensorInfo.read(pbf, pbf.readVarint() + pbf.pos);
};
SignatureDef._FieldEntry2.write = function (obj, pbf) {
    if (obj.key) pbf.writeStringField(1, obj.key);
    if (obj.value) pbf.writeMessage(2, TensorInfo.write, obj.value);
};

// AssetFileDef ========================================

var AssetFileDef = exports.AssetFileDef = {};

AssetFileDef.read = function (pbf, end) {
    return pbf.readFields(AssetFileDef._readField, {tensor_info: null, filename: ""}, end);
};
AssetFileDef._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.tensor_info = TensorInfo.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.filename = pbf.readString();
};
AssetFileDef.write = function (obj, pbf) {
    if (obj.tensor_info) pbf.writeMessage(1, TensorInfo.write, obj.tensor_info);
    if (obj.filename) pbf.writeStringField(2, obj.filename);
};

// OpDef ========================================

var OpDef = exports.OpDef = {};

OpDef.read = function (pbf, end) {
    return pbf.readFields(OpDef._readField, {name: "", input_arg: [], output_arg: [], attr: [], deprecation: null, summary: "", description: "", is_commutative: false, is_aggregate: false, is_stateful: false, allows_uninitialized_input: false}, end);
};
OpDef._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.input_arg.push(OpDef.ArgDef.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.output_arg.push(OpDef.ArgDef.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 4) obj.attr.push(OpDef.AttrDef.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 8) obj.deprecation = OpDef.OpDeprecation.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 5) obj.summary = pbf.readString();
    else if (tag === 6) obj.description = pbf.readString();
    else if (tag === 18) obj.is_commutative = pbf.readBoolean();
    else if (tag === 16) obj.is_aggregate = pbf.readBoolean();
    else if (tag === 17) obj.is_stateful = pbf.readBoolean();
    else if (tag === 19) obj.allows_uninitialized_input = pbf.readBoolean();
};
OpDef.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.input_arg) for (var i = 0; i < obj.input_arg.length; i++) pbf.writeMessage(2, OpDef.ArgDef.write, obj.input_arg[i]);
    if (obj.output_arg) for (i = 0; i < obj.output_arg.length; i++) pbf.writeMessage(3, OpDef.ArgDef.write, obj.output_arg[i]);
    if (obj.attr) for (i = 0; i < obj.attr.length; i++) pbf.writeMessage(4, OpDef.AttrDef.write, obj.attr[i]);
    if (obj.deprecation) pbf.writeMessage(8, OpDef.OpDeprecation.write, obj.deprecation);
    if (obj.summary) pbf.writeStringField(5, obj.summary);
    if (obj.description) pbf.writeStringField(6, obj.description);
    if (obj.is_commutative) pbf.writeBooleanField(18, obj.is_commutative);
    if (obj.is_aggregate) pbf.writeBooleanField(16, obj.is_aggregate);
    if (obj.is_stateful) pbf.writeBooleanField(17, obj.is_stateful);
    if (obj.allows_uninitialized_input) pbf.writeBooleanField(19, obj.allows_uninitialized_input);
};

// OpDef.ArgDef ========================================

OpDef.ArgDef = {};

OpDef.ArgDef.read = function (pbf, end) {
    return pbf.readFields(OpDef.ArgDef._readField, {name: "", description: "", type: 0, type_attr: "", number_attr: "", type_list_attr: "", is_ref: false}, end);
};
OpDef.ArgDef._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.description = pbf.readString();
    else if (tag === 3) obj.type = pbf.readVarint();
    else if (tag === 4) obj.type_attr = pbf.readString();
    else if (tag === 5) obj.number_attr = pbf.readString();
    else if (tag === 6) obj.type_list_attr = pbf.readString();
    else if (tag === 16) obj.is_ref = pbf.readBoolean();
};
OpDef.ArgDef.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.description) pbf.writeStringField(2, obj.description);
    if (obj.type) pbf.writeVarintField(3, obj.type);
    if (obj.type_attr) pbf.writeStringField(4, obj.type_attr);
    if (obj.number_attr) pbf.writeStringField(5, obj.number_attr);
    if (obj.type_list_attr) pbf.writeStringField(6, obj.type_list_attr);
    if (obj.is_ref) pbf.writeBooleanField(16, obj.is_ref);
};

// OpDef.AttrDef ========================================

OpDef.AttrDef = {};

OpDef.AttrDef.read = function (pbf, end) {
    return pbf.readFields(OpDef.AttrDef._readField, {name: "", type: "", default_value: null, description: "", has_minimum: false, minimum: 0, allowed_values: null}, end);
};
OpDef.AttrDef._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.type = pbf.readString();
    else if (tag === 3) obj.default_value = AttrValue.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.description = pbf.readString();
    else if (tag === 5) obj.has_minimum = pbf.readBoolean();
    else if (tag === 6) obj.minimum = pbf.readVarint(true);
    else if (tag === 7) obj.allowed_values = AttrValue.read(pbf, pbf.readVarint() + pbf.pos);
};
OpDef.AttrDef.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.type) pbf.writeStringField(2, obj.type);
    if (obj.default_value) pbf.writeMessage(3, AttrValue.write, obj.default_value);
    if (obj.description) pbf.writeStringField(4, obj.description);
    if (obj.has_minimum) pbf.writeBooleanField(5, obj.has_minimum);
    if (obj.minimum) pbf.writeVarintField(6, obj.minimum);
    if (obj.allowed_values) pbf.writeMessage(7, AttrValue.write, obj.allowed_values);
};

// OpDef.OpDeprecation ========================================

OpDef.OpDeprecation = {};

OpDef.OpDeprecation.read = function (pbf, end) {
    return pbf.readFields(OpDef.OpDeprecation._readField, {version: 0, explanation: ""}, end);
};
OpDef.OpDeprecation._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.version = pbf.readVarint(true);
    else if (tag === 2) obj.explanation = pbf.readString();
};
OpDef.OpDeprecation.write = function (obj, pbf) {
    if (obj.version) pbf.writeVarintField(1, obj.version);
    if (obj.explanation) pbf.writeStringField(2, obj.explanation);
};

// OpList ========================================

var OpList = exports.OpList = {};

OpList.read = function (pbf, end) {
    return pbf.readFields(OpList._readField, {op: []}, end);
};
OpList._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.op.push(OpDef.read(pbf, pbf.readVarint() + pbf.pos));
};
OpList.write = function (obj, pbf) {
    if (obj.op) for (var i = 0; i < obj.op.length; i++) pbf.writeMessage(1, OpDef.write, obj.op[i]);
};

// MetaGraphDef ========================================

var MetaGraphDef = exports.MetaGraphDef = {};

MetaGraphDef.read = function (pbf, end) {
    return pbf.readFields(MetaGraphDef._readField, {meta_info_def: null, graph_def: null, saver_def: null, collection_def: {}, signature_def: {}, asset_file_def: []}, end);
};
MetaGraphDef._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.meta_info_def = MetaGraphDef.MetaInfoDef.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.graph_def = GraphDef.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.saver_def = SaverDef.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4)  { var entry = MetaGraphDef._FieldEntry4.read(pbf, pbf.readVarint() + pbf.pos); obj.collection_def[entry.key] = entry.value; }
    else if (tag === 5)  { entry = MetaGraphDef._FieldEntry5.read(pbf, pbf.readVarint() + pbf.pos); obj.signature_def[entry.key] = entry.value; }
    else if (tag === 6) obj.asset_file_def.push(AssetFileDef.read(pbf, pbf.readVarint() + pbf.pos));
};
MetaGraphDef.write = function (obj, pbf) {
    if (obj.meta_info_def) pbf.writeMessage(1, MetaGraphDef.MetaInfoDef.write, obj.meta_info_def);
    if (obj.graph_def) pbf.writeMessage(2, GraphDef.write, obj.graph_def);
    if (obj.saver_def) pbf.writeMessage(3, SaverDef.write, obj.saver_def);
    if (obj.collection_def) for (var i in obj.collection_def) if (Object.prototype.hasOwnProperty.call(obj.collection_def, i)) pbf.writeMessage(4, MetaGraphDef._FieldEntry4.write, { key: i, value: obj.collection_def[i] });
    if (obj.signature_def) for (i in obj.signature_def) if (Object.prototype.hasOwnProperty.call(obj.signature_def, i)) pbf.writeMessage(5, MetaGraphDef._FieldEntry5.write, { key: i, value: obj.signature_def[i] });
    if (obj.asset_file_def) for (i = 0; i < obj.asset_file_def.length; i++) pbf.writeMessage(6, AssetFileDef.write, obj.asset_file_def[i]);
};

// MetaGraphDef.MetaInfoDef ========================================

MetaGraphDef.MetaInfoDef = {};

MetaGraphDef.MetaInfoDef.read = function (pbf, end) {
    return pbf.readFields(MetaGraphDef.MetaInfoDef._readField, {meta_graph_version: "", stripped_op_list: null, any_info: null, tags: [], tensorflow_version: "", tensorflow_git_version: ""}, end);
};
MetaGraphDef.MetaInfoDef._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.meta_graph_version = pbf.readString();
    else if (tag === 2) obj.stripped_op_list = OpList.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.any_info = Any.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.tags.push(pbf.readString());
    else if (tag === 5) obj.tensorflow_version = pbf.readString();
    else if (tag === 6) obj.tensorflow_git_version = pbf.readString();
};
MetaGraphDef.MetaInfoDef.write = function (obj, pbf) {
    if (obj.meta_graph_version) pbf.writeStringField(1, obj.meta_graph_version);
    if (obj.stripped_op_list) pbf.writeMessage(2, OpList.write, obj.stripped_op_list);
    if (obj.any_info) pbf.writeMessage(3, Any.write, obj.any_info);
    if (obj.tags) for (var i = 0; i < obj.tags.length; i++) pbf.writeStringField(4, obj.tags[i]);
    if (obj.tensorflow_version) pbf.writeStringField(5, obj.tensorflow_version);
    if (obj.tensorflow_git_version) pbf.writeStringField(6, obj.tensorflow_git_version);
};

// MetaGraphDef._FieldEntry4 ========================================

MetaGraphDef._FieldEntry4 = {};

MetaGraphDef._FieldEntry4.read = function (pbf, end) {
    return pbf.readFields(MetaGraphDef._FieldEntry4._readField, {key: "", value: null}, end);
};
MetaGraphDef._FieldEntry4._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.key = pbf.readString();
    else if (tag === 2) obj.value = CollectionDef.read(pbf, pbf.readVarint() + pbf.pos);
};
MetaGraphDef._FieldEntry4.write = function (obj, pbf) {
    if (obj.key) pbf.writeStringField(1, obj.key);
    if (obj.value) pbf.writeMessage(2, CollectionDef.write, obj.value);
};

// MetaGraphDef._FieldEntry5 ========================================

MetaGraphDef._FieldEntry5 = {};

MetaGraphDef._FieldEntry5.read = function (pbf, end) {
    return pbf.readFields(MetaGraphDef._FieldEntry5._readField, {key: "", value: null}, end);
};
MetaGraphDef._FieldEntry5._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.key = pbf.readString();
    else if (tag === 2) obj.value = SignatureDef.read(pbf, pbf.readVarint() + pbf.pos);
};
MetaGraphDef._FieldEntry5.write = function (obj, pbf) {
    if (obj.key) pbf.writeStringField(1, obj.key);
    if (obj.value) pbf.writeMessage(2, SignatureDef.write, obj.value);
};

// SavedModel ========================================

var SavedModel = exports.SavedModel = {};

SavedModel.read = function (pbf, end) {
    return pbf.readFields(SavedModel._readField, {saved_model_schema_version: 0, meta_graphs: []}, end);
};
SavedModel._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.saved_model_schema_version = pbf.readVarint(true);
    else if (tag === 2) obj.meta_graphs.push(MetaGraphDef.read(pbf, pbf.readVarint() + pbf.pos));
};
SavedModel.write = function (obj, pbf) {
    if (obj.saved_model_schema_version) pbf.writeVarintField(1, obj.saved_model_schema_version);
    if (obj.meta_graphs) for (var i = 0; i < obj.meta_graphs.length; i++) pbf.writeMessage(2, MetaGraphDef.write, obj.meta_graphs[i]);
};
