// index.d.ts
// TypeScript declarations.
//

declare module "tensorflow" {

  // TODO: This is an initial stab - work in progress.

  enum Types {
    float = 1,
    int32 = 3,
  }

  type TensorData = Number;
  type TensorValue = TensorData|TensorData[]|TensorData[][]|TensorData[][][]|TensorData[][][][];

  interface Tensor {
    shape: number[];
    type: Types;
    value: Buffer|TensorValue;
  }

  interface Graph {
    delete();
    createSession(): Session;
  }

  type TensorMap = {[name: string]: Tensor};
  type SessionRunInputs = {[name: string]: Tensor|TensorValue};
  type SessionRunOutputs = string|string[];
  type SessionRunTargets = string|string[];
  type SessionRunResult = Tensor|TensorMap;

  interface Session {
    delete();
    run(inputs: SessionRunInputs, outputs: SessionRunOutputs, targets?: SessionRunTargets): SessionRunResult;
  }

  function tensor(value: TensorValue|Buffer, type?: Types, shape?: number[]): Tensor;

  function graph(graphDef: string|Buffer|object): Graph;
}
